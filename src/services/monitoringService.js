const config = require('../../config/default');
const logger = require('../utils/logger');
const { launchBrowser } = require('./browserService');
const { checkProductAvailability } = require('./productService');
const { sendNotification } = require('./notificationService');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–µ–±-—Å–µ—Ä–≤–∏—Å (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
let webService = null;
try {
  webService = require('./webService');
} catch (error) {
  logger.info('Web service not available, web dashboard will not be updated');
}

/**
 * Monitors products for availability
 * @returns {Promise<void>}
 */
async function monitorProducts() {
  logger.info('Starting product monitoring...');
  
  let browser;
  let productStatuses = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
  let connectionIssuesCount = 0;
  const maxRetries = 3;
  
  try {
    browser = await launchBrowser();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    for (const item of config.targetItems) {
      let result = null;
      let retryCount = 0;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
      while (retryCount < maxRetries) {
        try {
          // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞, –¥–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–∞—É–∑—É
          if (retryCount > 0) {
            const waitTime = Math.pow(2, retryCount) * 5000; // 10, 20, 40 —Å–µ–∫—É–Ω–¥
            logger.info(`Retry attempt ${retryCount}. Waiting ${waitTime/1000} seconds...`);
            await new Promise(resolve => setTimeout(resolve, waitTime));
          }
          
          result = await checkProductAvailability(browser, item);
          
          // –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
          if (result) break;
          
        } catch (error) {
          logger.warn(`Attempt ${retryCount + 1} failed for ${item.name}: ${error.message}`);
          
          // –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–π–º–∞—É—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
          if (error.message.includes('timeout') || 
              error.message.includes('connection') ||
              error.message.includes('network')) {
            connectionIssuesCount++;
          }
          
          // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
          if (retryCount === 1 && browser) {
            logger.info('Recreating browser instance due to connection issues...');
            try {
              await browser.close();
            } catch (e) {
              logger.error(`Error closing browser: ${e.message}`);
            }
            await new Promise(resolve => setTimeout(resolve, 10000)); // –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
            browser = await launchBrowser();
          }
          
          retryCount++;
          
          // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
          if (retryCount >= maxRetries) {
            result = { 
              available: false, 
              error: `Failed after ${maxRetries} attempts: ${error.message}`
            };
          }
        }
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
      productStatuses.push({
        name: item.name,
        shop: item.shop,
        sizes: item.sizes,
        maxPrice: item.maxPrice,
        available: result ? result.available : false,
        price: result ? result.price : null,
        availableSizes: result && result.availableSizes ? result.availableSizes : [],
        error: result ? result.error : 'Failed to check product',
        lastChecked: new Date().toISOString()
      });
      
      if (result && result.available) {
        logger.info(`üîî PRODUCT AVAILABLE: ${item.name} in ${item.shop}`);
        
        // Construct product URL for notification
        const shopConfig = config.shops.find(s => s.name === item.shop);
        // The productId now contains the full path after the domain
        const productUrl = `${shopConfig.url}/${item.productId}`;
        
        try {
          await sendNotification(
            `‚úÖ Product available: ${item.name} (${item.shop})`,
            `
              <p><strong>Product:</strong> ${item.name}</p>
              <p><strong>Shop:</strong> ${item.shop}</p>
              <p><strong>Price:</strong> ${result.price}</p>
              <p><strong>Available sizes:</strong> ${result.availableSizes.join(', ')}</p>
              <p><strong>Product ID:</strong> ${item.productId}</p>
              <p><a href="${productUrl}">
                Go to product
              </a></p>
            `
          );
        } catch (notifError) {
          logger.error(`Failed to send notification: ${notifError.message}`);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if (webService) {
          try {
            await webService.addWebNotification(
              `–¢–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: ${item.name} (${item.shop})`,
              `–î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–≤–∞—Ä "${item.name}" –≤ –º–∞–≥–∞–∑–∏–Ω–µ ${item.shop} –ø–æ —Ü–µ–Ω–µ ${result.price} –≤ —Ä–∞–∑–º–µ—Ä–∞—Ö: ${result.availableSizes.join(', ')}`
            );
          } catch (webError) {
            logger.error(`Failed to add web notification: ${webError.message}`);
          }
        }
        
        // If auto-purchase is configured, execute it
        if (item.autoPurchase) {
          // Auto-purchase functionality would be implemented here
          logger.info('Auto-purchase is enabled for this product, but not implemented in current version');
        }
      } else {
        const errorMsg = result && result.error ? ` (${result.error})` : '';
        logger.info(`Product unavailable: ${item.name} in ${item.shop}${errorMsg}`);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å —à–∞–Ω—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
      const randomPause = 5000 + Math.floor(Math.random() * 10000); // –æ—Ç 5 –¥–æ 15 —Å–µ–∫—É–Ω–¥
      logger.info(`Pausing for ${randomPause/1000} seconds before checking next product...`);
      await new Promise(resolve => setTimeout(resolve, randomPause));
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    if (connectionIssuesCount >= config.targetItems.length) {
      logger.error(`All products had connection issues. Possible site protection detected!`);
      
      try {
        await sendNotification(
          '‚ö†Ô∏è Shopping bot connection issues',
          `<p>–í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–º–µ–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –í–æ–∑–º–æ–∂–Ω–æ, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ.</p>
           <p>–ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –≤–æ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.</p>`
        );
      } catch (notifError) {
        logger.error(`Failed to send notification about connection issues: ${notifError.message}`);
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if (webService) {
      try {
        await webService.updateWebDashboard(productStatuses);
      } catch (webError) {
        logger.error(`Error updating web dashboard: ${webError.message}`);
      }
    }
  } catch (error) {
    logger.error(`Error during monitoring: ${error.message}`);
    
    try {
      await sendNotification(
        '‚ùå Error during product monitoring',
        `<p>An error occurred: ${error.message}</p>`
      );
    } catch (notifError) {
      logger.error(`Failed to send error notification: ${notifError.message}`);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if (webService) {
      try {
        await webService.addWebNotification(
          '–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
          `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Ç–æ–≤–∞—Ä–æ–≤: ${error.message}`
        );
      } catch (webError) {
        logger.error(`Failed to add web notification: ${webError.message}`);
      }
    }
  } finally {
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    if (browser) {
      try {
        await browser.close();
        logger.info('Browser closed');
      } catch (closeError) {
        logger.error(`Error closing browser: ${closeError.message}`);
      }
    }
    
    // –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    try {
      require('child_process').execSync('pkill -f chromium');
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–¥–µ—Å—å
    }
  }
  
  logger.info('Product monitoring completed');
}

module.exports = {
  monitorProducts
};